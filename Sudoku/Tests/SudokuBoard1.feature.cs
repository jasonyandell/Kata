// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Sudoku board")]
    public partial class SudokuBoardFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "SudokuBoard.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sudoku board", "In order to represent the rules of Sudoku\r\nAs an user of the Board class\r\nI want " +
                    "the proper constraints to be mapped", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Box constraint")]
        [NUnit.Framework.TestCaseAttribute("1", "0", "0", "0", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", "2", "2", "0", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "2", "2", "0", "0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "3", "3", "4", "5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "8", "8", "7", "7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "6", "4", "7", "4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "1", "3", "0", "5", new string[0])]
        public virtual void BoxConstraint(string digit, string row, string column, string otherRow, string otherCol, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Box constraint", exampleTags);
#line 6
 this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("an empty board");
#line 8
 testRunner.When(string.Format("a {0} placed at {1}, {2}", digit, row, column));
#line 9
 testRunner.Then(string.Format("cannot play {0} at {1},{2}", digit, otherRow, otherCol));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot move in the same place twice")]
        [NUnit.Framework.TestCaseAttribute("1", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8", "2", "3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9", "2", "3", new string[0])]
        public virtual void CannotMoveInTheSamePlaceTwice(string digit, string row, string column, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot move in the same place twice", exampleTags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
 testRunner.Given("an empty board");
#line 22
 testRunner.When(string.Format("a 1 placed at {0}, {1}", row, column));
#line 23
 testRunner.Then(string.Format("cannot play {0} at {1}, {2}", digit, row, column));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot place a digit in the same row twice")]
        [NUnit.Framework.TestCaseAttribute("0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8", new string[0])]
        public virtual void CannotPlaceADigitInTheSameRowTwice(string row, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot place a digit in the same row twice", exampleTags);
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
 testRunner.Given("an empty board");
#line 38
 testRunner.When("a 1 placed at 1, 1");
#line 39
 testRunner.Then(string.Format("cannot play 1 at {0}, 1", row));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cannot place a digit in the same column twice")]
        [NUnit.Framework.TestCaseAttribute("0", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("3", new string[0])]
        [NUnit.Framework.TestCaseAttribute("4", new string[0])]
        [NUnit.Framework.TestCaseAttribute("5", new string[0])]
        [NUnit.Framework.TestCaseAttribute("6", new string[0])]
        [NUnit.Framework.TestCaseAttribute("7", new string[0])]
        [NUnit.Framework.TestCaseAttribute("8", new string[0])]
        public virtual void CannotPlaceADigitInTheSameColumnTwice(string column, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot place a digit in the same column twice", exampleTags);
#line 52
this.ScenarioSetup(scenarioInfo);
#line 53
 testRunner.Given("an empty board");
#line 54
 testRunner.When("a 1 placed at 1, 1");
#line 55
 testRunner.Then(string.Format("cannot play 1 at 1, {0}", column));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Solve empty board")]
        public virtual void SolveEmptyBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Solve empty board", ((string[])(null)));
#line 68
this.ScenarioSetup(scenarioInfo);
#line 69
 testRunner.Given("an empty board");
#line 70
 testRunner.Then("solve it");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Solve a difficult board")]
        public virtual void SolveADifficultBoard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Solve a difficult board", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
 testRunner.Given("a difficult board");
#line 74
 testRunner.Then("solve it");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Solve a board from project Euler")]
        public virtual void SolveABoardFromProjectEuler()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Solve a board from project Euler", ((string[])(null)));
#line 76
this.ScenarioSetup(scenarioInfo);
#line 77
 testRunner.Given("an example Euler board");
#line 78
 testRunner.Then("solve it");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can take board input from scenario file")]
        public virtual void CanTakeBoardInputFromScenarioFile()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can take board input from scenario file", ((string[])(null)));
#line 80
this.ScenarioSetup(scenarioInfo);
#line hidden
#line 81
 testRunner.Given("this board", "4 . . . . . 8 . 5\r\n. 3 . . . . . . .\r\n. . . 7 . . . . .\r\n. 2 . . . . . 6 .\r\n. . ." +
                    " . 8 . 4 . .\r\n. 4 . . 1 . . . .\r\n. . . 6 . 3 . 7 .\r\n5 . 3 2 . . . . .\r\n1 . 4 . ." +
                    " . . . .", ((TechTalk.SpecFlow.Table)(null)));
#line 93
 testRunner.Then("solve it");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
